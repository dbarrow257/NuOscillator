# TN: This shebang is rather useless, since I guess the user needs to "source" the setup,
# not execute it. Executing it from a different shell than bash would only open bash, run
# the script and close the bash with no changes in the PATHs of the original shell. That is,
# nothing gets set up. If the script is sourced, the shebang is skipped and the script is sourced
# from the original shell (not bash).
# Anyway, I will keep it here, if there is some use to it I am missing.
#!/bin/bash

if ! type add_to_PATH &> /dev/null; then

### Adapted from https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
add_to_PATH()
{
  for d; do

    d=$( cd -- $d && { pwd -P || pwd; } ) 2>/dev/null  # canonicalize symbolic links
    if [[ -z $d ]]; then continue; fi  # skip nonexistent directory

    if [[ $d == "/usr/bin" || $d == "/usr/bin64" || $d == "/usr/local/bin" || $d == "/usr/local/bin64" ]]; then
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$PATH:$d;;
      esac
    else
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$d:$PATH;;
      esac
    fi
  done
}

fi

if ! type add_to_LD_LIBRARY_PATH &> /dev/null; then

add_to_LD_LIBRARY_PATH()
{
  for d; do

    d=$( cd -- $d && { pwd -P || pwd; } ) 2>/dev/null  # canonicalize symbolic links
    if [[ -z $d ]]; then continue; fi  # skip nonexistent directory

    if [[ $d == "/usr/bin" || $d == "/usr/bin64" || $d == "/usr/local/bin" || $d == "/usr/local/bin64" ]]; then
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$d;;
      esac
    else
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$d:$LD_LIBRARY_PATH;;
      esac
    fi
  done
}

fi

# TN: this is one of the most stable implementation of getting the
# path to the script being called (and hence the path to the $NUOSCILLATOR_ROOT/bin)
# I have seen so far. This can be called from anywhere and with
# both source or ., with relative or absolute paths.
pushd . > '/dev/null';
SCRIPT_PATH="${BASH_SOURCE[0]:-$0}";

while [[ -h "$SCRIPT_PATH" ]];
do
    cd "$( dirname -- "$SCRIPT_PATH"; )";
    SCRIPT_PATH="$( readlink -f -- "$SCRIPT_PATH"; )";
done

cd "$( dirname -- "$SCRIPT_PATH"; )" > '/dev/null';
SCRIPT_PATH="$( pwd; )";
popd  > '/dev/null';

export NUOSCILLATOR_ROOT=${SCRIPT_PATH}/..
export NUOSCILLATOR_VERSION=@NUOSCILLATOR_VERSION@

add_to_PATH ${NUOSCILLATOR_ROOT}/bin
add_to_LD_LIBRARY_PATH ${NUOSCILLATOR_ROOT}/lib

if [[ -n "@CUDAProb3_RELATIVE_PATH@" ]]; then
  export CUDAProb3_DIR="${NUOSCILLATOR_ROOT}/@CUDAProb3_RELATIVE_PATH@"
fi

if [[ -n "@HDF5_REL_LIB_PATH@" ]]; then
  add_to_LD_LIBRARY_PATH "${NUOSCILLATOR_ROOT}/@HDF5_REL_LIB_PATH@"
fi

if [[ -n "@SQUIDS_REL_LIB_PATH@" ]]; then
  add_to_LD_LIBRARY_PATH "${NUOSCILLATOR_ROOT}/@SQUIDS_REL_LIB_PATH@"
fi

if [[ -n "@NUSQUIDS_REL_LIB_PATH@" ]]; then
  add_to_LD_LIBRARY_PATH "${NUOSCILLATOR_ROOT}/@NUSQUIDS_REL_LIB_PATH@"
fi

if [[ -n "@OSCPROB_REL_LIB_PATH@" ]]; then
  add_to_LD_LIBRARY_PATH "${NUOSCILLATOR_ROOT}/@OSCPROB_REL_LIB_PATH@"
fi

unset SCRIPT_PATH
